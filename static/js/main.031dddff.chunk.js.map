{"version":3,"sources":["logo.svg","components/TaskInput/TaskInput.js","components/TaskList/Task/Task.js","components/TaskList/TaskList.js","components/TaskBar/TaskBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","memo","props","Container","fixed","onSubmit","submitTask","TextField","fullWidth","placeholder","defaultDisplay","type","name","onChange","typeTask","Button","task","ListItem","ListItemText","className","styling","onClick","onComplete","value","ButtonGroup","variant","color","onDelete","taskList","List","taskItems","map","index","status","key","Box","mb","AppBar","position","Typography","username","App","holdTempTaskHandler","event","setState","tempTask","target","addToListHandler","state","push","reset","preventDefault","deleteTaskHandler","taskIndex","splice","commpleteTaskHandler","maxWidth","TaskBar","TaskInput","this","defaultValue","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.031dddff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\n\n\n\nconst taskInput = (props) => {\n    return (\n        <Container fixed>\n            <form onSubmit={props.submitTask}>\n                        <TextField fullWidth placeholder={props.defaultDisplay} type='text' name='taskinput' onChange={props.typeTask}></TextField>\n                <Button type=\"submit\">Submit</Button>\n            </form>\n        </Container>\n\n    )\n};\n\nexport default React.memo(taskInput);","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport './Task.css'\n\n\nconst task = (props) => {\n    return (\n        <ListItem>\n            <ListItemText className={props.styling} onClick={props.onComplete}>{props.value}</ListItemText>\n            <ButtonGroup>\n                <Button variant=\"outlined\" color=\"secondary\" onClick={props.onDelete}>Delete</Button>\n            </ButtonGroup>\n        </ListItem>\n    )\n}\n\nexport default task;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport Task from './Task/Task'\nimport './TaskList.css'\n\n\nconst taskList = (props) => {\n    return (\n        <Container fixed>\n            <List>\n                {props.taskItems.map((task, index) => {\n                    return <Task styling={task.status} key={index} value={task.task} onComplete={() => props.onComplete(index)} onDelete={() => props.onDelete(index)}></Task>\n                })}\n            </List>\n        </Container>\n    )\n}\n\nexport default taskList;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport { spacing } from '@material-ui/system';\n\n\n\nconst appBar = (props) => {\n    return (\n        <Box mb={4}>\n            <AppBar position='static'>\n                <Typography variant=\"h2\">{props.username}To Do</Typography> \n            </AppBar>\n        </Box>\n    )\n}\n\nexport default React.memo(appBar);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport TaskInput from './components/TaskInput/TaskInput';\nimport TaskList from './components/TaskList/TaskList';\nimport TaskBar from './components/TaskBar/TaskBar';\n\nimport Container from '@material-ui/core/Container';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    taskItems: [],\n    tempTask: 'First Task',\n    }\n  };\n\n  holdTempTaskHandler = (event) => {\n    this.setState({tempTask: event.target.value})\n  }\n\n  addToListHandler = (event) => {\n    const taskItems = [...this.state.taskItems];\n    taskItems.push({'task': this.state.tempTask, 'status':'incomplete'})\n    this.setState({tempTask: 'Subsequent Task'})\n    event.target.reset();\n    this.setState({\n      taskItems: taskItems\n    })\n    event.preventDefault()\n  }\n  \n  deleteTaskHandler = (taskIndex) => {\n    const taskItems = [...this.state.taskItems];\n    const itemToRemove = taskIndex;\n    taskItems.splice(taskIndex, 1);\n    this.setState({\n      taskItems: taskItems\n    })\n  }\n\n  commpleteTaskHandler = (taskIndex) => {\n    const taskItems = [...this.state.taskItems];\n    const itemToComplete = taskIndex;\n    if (taskItems[taskIndex].status == 'completed') {\n      taskItems[taskIndex].status = 'incomplete'\n    }\n    else {\n      taskItems[taskIndex].status = 'completed'\n    }\n    this.setState({\n      taskItems: taskItems\n    })\n  }\n\n  render() {\n\n    return (\n      <Container maxWidth=\"false\" className=\"App\">\n        <TaskBar username={''}/>\n        <TaskInput defaultDisplay={this.state.tempTask} defaultValue={this.state.defaultValue} typeTask={this.holdTempTaskHandler} submitTask={this.addToListHandler} />\n        <TaskList taskItems={this.state.taskItems} onComplete={this.commpleteTaskHandler} onDelete={this.deleteTaskHandler}/>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}